# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cache_pb2 as cache__pb2


class CacheStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.post = channel.unary_unary(
                '/cache.Cache/post',
                request_serializer=cache__pb2.Key_Value.SerializeToString,
                response_deserializer=cache__pb2.PostReply.FromString,
                )
        self.get = channel.unary_unary(
                '/cache.Cache/get',
                request_serializer=cache__pb2.Key.SerializeToString,
                response_deserializer=cache__pb2.GetReply.FromString,
                )
        self.delete = channel.unary_unary(
                '/cache.Cache/delete',
                request_serializer=cache__pb2.Key.SerializeToString,
                response_deserializer=cache__pb2.DeleteReply.FromString,
                )


class CacheServicer(object):
    """The greeting service definition.
    """

    def post(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CacheServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'post': grpc.unary_unary_rpc_method_handler(
                    servicer.post,
                    request_deserializer=cache__pb2.Key_Value.FromString,
                    response_serializer=cache__pb2.PostReply.SerializeToString,
            ),
            'get': grpc.unary_unary_rpc_method_handler(
                    servicer.get,
                    request_deserializer=cache__pb2.Key.FromString,
                    response_serializer=cache__pb2.GetReply.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=cache__pb2.Key.FromString,
                    response_serializer=cache__pb2.DeleteReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'cache.Cache', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Cache(object):
    """The greeting service definition.
    """

    @staticmethod
    def post(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cache.Cache/post',
            cache__pb2.Key_Value.SerializeToString,
            cache__pb2.PostReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cache.Cache/get',
            cache__pb2.Key.SerializeToString,
            cache__pb2.GetReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/cache.Cache/delete',
            cache__pb2.Key.SerializeToString,
            cache__pb2.DeleteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
